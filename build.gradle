
boolean isLibrary(entry) { return entry.properties.kind.equals('lib') }
boolean isTestScope(entry) { return entry.entryAttributes.get('gradle_used_by_scope').equals('test'); }
boolean isModule(entry) { isLibrary(entry) && !isTestScope(entry); }
boolean isSource(entry) { return entry.properties.kind.equals('src'); }

allprojects {

  apply plugin: 'java-library'
  apply plugin: 'eclipse'
  apply plugin: 'maven-publish'

  group = 'com.github.zourzouvillys.webports'
  
  version = "${version}" != "unspecified"
    ? "${version}"
    : 'master-SNAPSHOT';
  
  sourceCompatibility = 9
  targetCompatibility = 9
  
  repositories {
    mavenCentral()
    jcenter()
  }

  jar {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
  }
  
  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  publishing {
    publications {
      "$project.name"(MavenPublication) {
        groupId project.group
        artifactId ((project.name == 'webports') ? ('webports-core') : ('webports-' + project.name))
        version project.version
        from components.java
        artifact sourcesJar
      }
    }
    repositories {
      maven {
        url = "$rootProject.buildDir/repo"
      }
    }
  }

  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  javadoc {
    title = "ZRZ WebPorts"
    failOnError = false
    options.addBooleanOption('html5', true)
  }    
 
 
  eclipse {
  
    project.name = (project.name == 'webports') ? 'webports' : ('webports:' + project.name)
    project.natures << 'org.eclipse.buildship.core.gradleprojectnature'

    classpath {
      file {
        whenMerged {
          //entries.findAll { isModule(it) }.each {  it.entryAttributes['module'] = 'true' }
          entries.findAll { isSource(it) && isTestScope(it) }.each { it.entryAttributes['test'] = 'true' }
          entries.findAll { isLibrary(it) && isTestScope(it) }.each { it.entryAttributes['test'] = 'true' }
        }
      }
    }
    
  }
  
  dependencies {
    compileOnly 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.1.150'
  }

  
}

dependencies {
  
  api project(':api')
  api project(':spi')

  // shared libs
  implementation ('com.google.guava:guava:27.0-jre') {
    // ignore the dependencies
    transitive = false
  }
  
  implementation 'org.slf4j:slf4j-api:1.7.25'
  implementation 'io.reactivex.rxjava2:rxjava:2.2.2'
  
  // main transports.
  api 'io.netty:netty-codec-http2:4.1.31.Final'
  api 'io.netty:netty-codec-http:4.1.31.Final'
  
  implementation 'io.netty:netty-handler:4.1.31.Final'
  implementation 'io.netty:netty-transport:4.1.31.Final'

  compileOnly 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.1.150'
  
  testImplementation  'junit:junit:4.12'
  testImplementation  'org.assertj:assertj-core:3.6.1'
  testImplementation  'ch.qos.logback:logback-classic:1.2.3'  

}

project(':spi') {
  dependencies {
    api 'io.reactivex.rxjava2:rxjava:2.2.2'
    api 'io.netty:netty-codec-http2:4.1.31.Final'
    api 'io.netty:netty-handler:4.1.31.Final'
  }  
}


project(':api') {
  dependencies {
    api 'io.reactivex.rxjava2:rxjava:2.2.2'
    api 'io.netty:netty-codec-http2:4.1.31.Final'
  }
}


project(':plugins:acme-autocert') {
  dependencies {
    implementation project(':spi')
    implementation 'org.shredzone.acme4j:acme4j-client:2.3'
    implementation 'org.shredzone.acme4j:acme4j-utils:2.3'
  }
}


project(':plugins:bouncycastle') {
  dependencies {
    implementation project(':spi')
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.60'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.60'  
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation ('com.google.guava:guava:27.0-jre') {
      transitive = false
    }
  }
}



project(':plugins:jersey2') {
  dependencies {
    implementation project(':spi')
    implementation project(':api')
    // for JAX-RS:
    compile 'org.glassfish.jersey.core:jersey-server:2.27'

    testCompile 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.1.150'
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.6.1'
    testCompile 'ch.qos.logback:logback-classic:1.2.3'  

 
  }
}

project(':plugins:grpc') {

  dependencies {
  
    implementation project(':spi')
    implementation project(':api')
    
    implementation 'org.slf4j:slf4j-api:1.7.25'
    
    implementation 'io.grpc:grpc-core:1.18.0'

    testCompile 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.1.150'
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.6.1'
    testCompile 'ch.qos.logback:logback-classic:1.2.3'  

 
  }
}
